/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.4/userguide/custom_plugins.html in the Gradle documentation.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'

    id 'maven-publish'
}

group = "com.deeper-wire.python"
version = '0.1'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    testImplementation(
        gradleTestKit(),
        "junit:junit:4.12"
    )
    // Use the awesome Spock testing and specification framework
    testImplementation('org.spockframework:spock-core:2.3-groovy-3.0') {
        exclude module: 'groovy-all'
    }

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

gradlePlugin {
    // Define the plugin
    website = 'https://github.com/Taknok/gradle-python-envs'
    vcsUrl = 'https://github.com/Taknok/gradle-python-envs'
    plugins {
        pythonEnvsPlugin {
            id = 'com.deeper-wire.python.envs'
            implementationClass = 'com.deeperwire.python.envs.PythonEnvsPlugin'
            displayName = 'Gradle Python Envs plugin'
            description = 'A plugin to install python envs on various arch'
            tags.addAll('python', 'build', 'build-system')
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = 'localPluginRepository'
            url = '../local-plugin-repository'
        }
    }
}
